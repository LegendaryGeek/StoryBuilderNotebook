/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'application'
    id 'java'
}
application {
    applicationDefaultJvmArgs = ['--add-opens java.base/java.io=ALL-UNNAMED']
}

	mainClassName = 'geek.story.StoryBuilderNotebook'
	

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework - borked
    //implementation 'junit:junit:4.13.2'
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	
	//GSON - borked
	implementation 'com.google.code.gson:gson:2.9.0'

    // google http client - doesnt appear to be used
	//implementation 'com.google.http-client:google-http-client-gson:1.33.0'
	
	//log4j - borked
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'
	
    // apache commons io - borked
	implementation 'org.apache.commons:commons-io:1.3.2'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    google()
    mavenCentral()
    //maven{ url "https://mvnrepository.com/artifact/junit/junit"}
}
jar {
    manifest {
        attributes(
           // 'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
            'Main-Class': 'geek.story.StoryBuilderNotebook'
        )
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task fatJar(type: Jar) {
    classifier = 'fat'
//    appendix = 'fat'
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    manifest {
        attributes(
           // 'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
            'Main-Class': 'geek.story.StoryBuilderNotebook'
        )
    }
}

